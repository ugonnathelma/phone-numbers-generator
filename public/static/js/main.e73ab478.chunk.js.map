{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","isLoading","data","generate","_this","setState","axios","post","then","res","catch","error","downloadFile","react_default","a","createElement","className","this","count","min","max","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mRA6DeA,oNAxDbC,MAAQ,CACNC,WAAW,EACXC,KAAM,QAGRC,SAAW,WACTC,EAAKC,SAAS,CAAEJ,WAAW,IAC3BK,IACGC,KAAK,0BACLC,KAAK,SAAAC,GACAA,EAAIP,MAAME,EAAKC,SAAS,CAAEJ,WAAW,EAAOC,KAAMO,EAAIP,SAE3DQ,MAAM,WACLN,EAAKC,SAAS,CAAEM,MAAO,4CAI7BC,aAAe,qFAGb,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,iCACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,+DAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,SACQH,EAAAC,EAAAC,cAAA,yBACNF,EAAAC,EAAAC,cAAA,2BAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZC,KAAKjB,MAAMC,WAAaY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACvCC,KAAKjB,MAAME,MACVW,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,yCAAiCE,KAAKjB,MAAME,KAAKgB,OACjDL,EAAAC,EAAAC,cAAA,kCAA0BE,KAAKjB,MAAME,KAAKiB,KAC1CN,EAAAC,EAAAC,cAAA,kCAA0BE,KAAKjB,MAAME,KAAKkB,KAC1CP,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,UAAQM,QAASJ,KAAKL,cAAtB,mBAILK,KAAKjB,MAAMW,OAASE,EAAAC,EAAAC,cAAA,WAAME,KAAKjB,MAAMW,QAExCE,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeK,QAASJ,KAAKd,UAA/C,sBA/CMmB,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.e73ab478.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    isLoading: false,\n    data: null\n  };\n\n  generate = () => {\n    this.setState({ isLoading: true });\n    axios\n      .post(\"/phonenumbers/generate\")\n      .then(res => {\n        if (res.data) this.setState({ isLoading: false, data: res.data });\n      })\n      .catch(() => {\n        this.setState({ error: \"An error occured, please try again\" });\n      });\n  };\n\n  downloadFile = () => {};\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div>\n            <p className=\"main-title\">Random Phone Number Generator</p>\n            <p className=\"sub-title\">\n              Click \"Generate\" Button to generate a list of phone numbers\n            </p>\n            <div className=\"sort-links\">\n              Sort: <span>Ascending</span>\n              <span>Descending</span>\n            </div>\n            <div className=\"stat-area\">\n              {this.state.isLoading && <div className=\"loading\" />}\n              {this.state.data && (\n                <div>\n                  <span> Total Generated Numbers: {this.state.data.count}</span>\n                  <span> Min Phone Number: {this.state.data.min}</span>\n                  <span> Max Phone Number: {this.state.data.max}</span>\n                  <span>\n                    <button onClick={this.downloadFile}>Download File</button>\n                  </span>\n                </div>\n              )}\n              {this.state.error && <div>{this.state.error}</div>}\n            </div>\n            <button className=\"generate-btn\" onClick={this.generate}>\n              Generate\n            </button>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}